{{ define "structType" }}
{{- if .SliceReturn -}}
[]*{{ .ReturnType }}
{{- else -}}
*{{ .ReturnType }}
{{- end -}}
{{ end }}

{{- define "goroutineQuery" -}}

{{- range .Subqueries }}
  {{ .VarName }}Chan := make(chan {{ template "structType" . }})
  {{ end -}}
  errChan := make(chan error, {{ len $.Subqueries }})


	var wg sync.WaitGroup
	wg.Add({{ len $.Subqueries }})

  {{ range .Subqueries }}
  go func() {
    defer wg.Done()
    {{ .VarName }}, err := q.{{ .Method }}(ctx, {{ if .Context.MakeParamStruct }}params.{{ end }}{{ .ParamName }})
    if err != nil {
      errChan <- err
      return
    }
    {{ .VarName }}Chan <- {{ .VarName }}
	}()
  {{ end }}

	wg.Wait()
  {{ range .Subqueries }}
  close({{ .VarName }}Chan)
  {{ end }}

	for err := range errChan {
		return nil, err
	}

  {{ range .Subqueries }}
  {{ .VarName }} := <- {{ .VarName }}Chan
  {{ end }}

{{ end }}
