// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (name)
VALUES
    (?)
RETURNING
    id, name, created_at
`

type CreateUserParams struct {
	Name string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name)
	var i User
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return &i, err
}

const getPostsFromUserId = `-- name: GetPostsFromUserId :many
SELECT
    id, title, content, created_at, updated_at, author_id, subreddit_id
FROM
    posts
WHERE
    author_id = ?1
    AND subreddit_id = ?2
`

type GetPostsFromUserIdParams struct {
	UserId      int64 `json:"userId"`
	SubredditId int64 `json:"subredditId"`
}

func (q *Queries) GetPostsFromUserId(ctx context.Context, arg GetPostsFromUserIdParams) ([]*Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsFromUserId, arg.UserId, arg.SubredditId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Id,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorId,
			&i.SubredditId,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    id, name, created_at
FROM
    users
WHERE
    id = ?1
`

type GetUserParams struct {
	UserId int64 `json:"userId"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.UserId)
	var i User
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return &i, err
}

const postWithUser = `-- name: PostWithUser :one
SELECT
    posts.id, posts.title, posts.content, posts.created_at, posts.updated_at, posts.author_id, posts.subreddit_id,
    u.author, u.author, u.author AS author
FROM
    posts
    JOIN users u ON posts.author_id = users.id
WHERE
    users.id = ?
`

type PostWithUserParams struct {
	Id int64 `json:"id"`
}

type PostWithUserRow struct {
	Id          int64     `json:"id"`
	Title       string    `json:"title"`
	Content     *string   `json:"content"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	AuthorId    int64     `json:"author_id"`
	SubredditId int64     `json:"subreddit_id"`
	User        User      `json:"user"`
}

func (q *Queries) PostWithUser(ctx context.Context, arg PostWithUserParams) (*PostWithUserRow, error) {
	row := q.db.QueryRowContext(ctx, postWithUser, arg.Id)
	var i PostWithUserRow
	err := row.Scan(
		&i.Id,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorId,
		&i.SubredditId,
		&i.User.Id,
		&i.User.Name,
		&i.User.CreatedAt,
	)
	return &i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE
    posts
SET
    content = ?,
    updated_at = ?
WHERE
    id = ?
RETURNING
    id, title, content, created_at, updated_at, author_id, subreddit_id
`

type UpdatePostParams struct {
	Content   *string   `json:"content"`
	UpdatedAt time.Time `json:"updated_at"`
	Id        int64     `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (*Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.Content, arg.UpdatedAt, arg.Id)
	var i Post
	err := row.Scan(
		&i.Id,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorId,
		&i.SubredditId,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    users
SET
    name = ?
WHERE
    id = ?
`

type UpdateUserParams struct {
	Name string `json:"name"`
	Id   int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Id)
	return err
}
